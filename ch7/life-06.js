// Generated by CoffeeScript 1.8.0
module.exports = (function() {
  var build, fate, iterate, neighbors, _ref;
  return _ref = {
    build: function(size, density) {
      var world, x, y, _i, _j, _ref, _ref1;
      if (size == null) {
        size = 16;
      }
      if (density == null) {
        density = 1 / 3;
      }
      world = [];
      for (x = _i = 0, _ref = size - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; x = 0 <= _ref ? ++_i : --_i) {
        world[x] = [];
        for (y = _j = 0, _ref1 = size - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; y = 0 <= _ref1 ? ++_j : --_j) {
          world[x][y] = Math.random() <= density;
        }
      }
      return world;
    },
    iterate: function(before) {
      var after, col, row, x, y, _i, _j, _len, _len1;
      after = [];
      for (x = _i = 0, _len = before.length; _i < _len; x = ++_i) {
        row = before[x];
        after[x] = [];
        for (y = _j = 0, _len1 = row.length; _j < _len1; y = ++_j) {
          col = row[y];
          after[x][y] = fate(before, x, y);
        }
      }
      return after;
    },
    fate: function(world, x, y) {
      var alive, count;
      count = (neighbors(world, x, y)).length;
      alive = world[x][y];
      return (alive && (2 <= count && count <= 3)) || (!alive && count === 3);
    },
    neighbors: (function(directions, radd) {
      var dx, dy, _i, _j, _len, _len1, _ref, _ref1;
      _ref = [-1, 0, 1];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dx = _ref[_i];
        _ref1 = [-1, 0, 1];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          dy = _ref1[_j];
          if ((dx !== dy || dy !== 0)) {
            directions.push([dx, dy]);
          }
        }
      }
      radd = function(x, y, size) {
        return (x + y + size) % size;
      };
      return function(world, x, y) {
        var results, size, x_, y_, _k, _len2, _ref2;
        results = [];
        size = world.length;
        for (_k = 0, _len2 = directions.length; _k < _len2; _k++) {
          _ref2 = directions[_k], dx = _ref2[0], dy = _ref2[1];
          x_ = radd(x, dx, size);
          y_ = radd(y, dy, size);
          if (world[x_][y_]) {
            results.push([x_, y_]);
          }
        }
        return results;
      };
    })([], null),
    run: function*(world, generations) {
      var i, _i;
      for (i = _i = 1; 1 <= generations ? _i <= generations : _i >= generations; i = 1 <= generations ? ++_i : --_i) {
        (yield (world = iterate(world)));
      }
      return world;
    },
    print: (function() {
      var write;
      write = function(string) {
        return process.stdout.write(string);
      };
      return function(world) {
        var col, row, _i, _j, _len, _len1, _results;
        _results = [];
        for (_i = 0, _len = world.length; _i < _len; _i++) {
          row = world[_i];
          for (_j = 0, _len1 = row.length; _j < _len1; _j++) {
            col = row[_j];
            write((col ? " *" : " -"));
          }
          _results.push(write("\n"));
        }
        return _results;
      };
    })()
  }, build = _ref.build, iterate = _ref.iterate, fate = _ref.fate, neighbors = _ref.neighbors, _ref;
})();
